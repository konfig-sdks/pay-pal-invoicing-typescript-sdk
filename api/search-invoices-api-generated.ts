/* tslint:disable */
/* eslint-disable */
/*
Invoices

Use the Invoicing API to create, send, and manage invoices. You can also use the API or webhooks to track invoice payments. When you send an invoice to a customer, the invoice moves from draft to payable state. PayPal then emails the customer a link to the invoice on the PayPal website. Customers with a PayPal account can log in and pay the invoice with PayPal. Alternatively, customers can pay as a guest with a debit card or credit card. For more information, see the <a href=\"/docs/invoicing/\">Invoicing Overview</a> and the <a href=\"/docs/invoicing/basic-integration/\">Invoicing Integration Guide</a>.

The version of the OpenAPI document: 2.3


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AmountRange } from '../models';
// @ts-ignore
import { DateRange } from '../models';
// @ts-ignore
import { DateTimeRange } from '../models';
// @ts-ignore
import { Error403 } from '../models';
// @ts-ignore
import { ErrorDefault } from '../models';
// @ts-ignore
import { InvoiceStatus } from '../models';
// @ts-ignore
import { Invoices } from '../models';
// @ts-ignore
import { SearchData } from '../models';
// @ts-ignore
import { SearchinvoicesList400Response } from '../models';
// @ts-ignore
import { SearchinvoicesListResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SearchInvoicesApi - axios parameter creator
 * @export
 */
export const SearchInvoicesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Searches for and lists invoices that match search criteria. If you pass multiple criteria, the response lists invoices that match all criteria.
         * @summary Search for invoices
         * @param {number} [page] The page number to be retrieved, for the list of templates. So, a combination of &#x60;page&#x3D;1&#x60; and &#x60;page_size&#x3D;20&#x60; returns the first 20 templates. A combination of &#x60;page&#x3D;2&#x60; and &#x60;page_size&#x3D;20&#x60; returns the next 20 templates.
         * @param {number} [pageSize] The maximum number of templates to return in the response.
         * @param {boolean} [totalRequired] Indicates whether the to show &lt;code&gt;total_pages&lt;/code&gt; and &lt;code&gt;total_items&lt;/code&gt; in the response.
         * @param {SearchData} [searchData] The invoice search can be used to retrieve the invoices based on the search parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (page?: number, pageSize?: number, totalRequired?: boolean, searchData?: SearchData, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/invoicing/search-invoices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Oauth2", ["https://uri.paypal.com/services/invoicing/invoices/read"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (totalRequired !== undefined) {
                localVarQueryParameter['total_required'] = totalRequired;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: searchData,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/invoicing/search-invoices',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(searchData, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchInvoicesApi - functional programming interface
 * @export
 */
export const SearchInvoicesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SearchInvoicesApiAxiosParamCreator(configuration)
    return {
        /**
         * Searches for and lists invoices that match search criteria. If you pass multiple criteria, the response lists invoices that match all criteria.
         * @summary Search for invoices
         * @param {SearchInvoicesApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: SearchInvoicesApiListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Invoices>> {
            const searchData: SearchData = {
                recipient_email: requestParameters.recipient_email,
                recipient_first_name: requestParameters.recipient_first_name,
                recipient_last_name: requestParameters.recipient_last_name,
                recipient_business_name: requestParameters.recipient_business_name,
                invoice_number: requestParameters.invoice_number,
                status: requestParameters.status,
                reference: requestParameters.reference,
                currency_code: requestParameters.currency_code,
                memo: requestParameters.memo,
                total_amount_range: requestParameters.total_amount_range,
                invoice_date_range: requestParameters.invoice_date_range,
                due_date_range: requestParameters.due_date_range,
                payment_date_range: requestParameters.payment_date_range,
                creation_date_range: requestParameters.creation_date_range,
                archived: requestParameters.archived,
                fields: requestParameters.fields
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.page, requestParameters.pageSize, requestParameters.totalRequired, searchData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SearchInvoicesApi - factory interface
 * @export
 */
export const SearchInvoicesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SearchInvoicesApiFp(configuration)
    return {
        /**
         * Searches for and lists invoices that match search criteria. If you pass multiple criteria, the response lists invoices that match all criteria.
         * @summary Search for invoices
         * @param {SearchInvoicesApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: SearchInvoicesApiListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Invoices> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for list operation in SearchInvoicesApi.
 * @export
 * @interface SearchInvoicesApiListRequest
 */
export type SearchInvoicesApiListRequest = {
    
    /**
    * The page number to be retrieved, for the list of templates. So, a combination of `page=1` and `page_size=20` returns the first 20 templates. A combination of `page=2` and `page_size=20` returns the next 20 templates.
    * @type {number}
    * @memberof SearchInvoicesApiList
    */
    readonly page?: number
    
    /**
    * The maximum number of templates to return in the response.
    * @type {number}
    * @memberof SearchInvoicesApiList
    */
    readonly pageSize?: number
    
    /**
    * Indicates whether the to show <code>total_pages</code> and <code>total_items</code> in the response.
    * @type {boolean}
    * @memberof SearchInvoicesApiList
    */
    readonly totalRequired?: boolean
    
} & SearchData

/**
 * SearchInvoicesApiGenerated - object-oriented interface
 * @export
 * @class SearchInvoicesApiGenerated
 * @extends {BaseAPI}
 */
export class SearchInvoicesApiGenerated extends BaseAPI {
    /**
     * Searches for and lists invoices that match search criteria. If you pass multiple criteria, the response lists invoices that match all criteria.
     * @summary Search for invoices
     * @param {SearchInvoicesApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchInvoicesApiGenerated
     */
    public list(requestParameters: SearchInvoicesApiListRequest = {}, options?: AxiosRequestConfig) {
        return SearchInvoicesApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
