/* tslint:disable */
/* eslint-disable */
/*
Invoices

Use the Invoicing API to create, send, and manage invoices. You can also use the API or webhooks to track invoice payments. When you send an invoice to a customer, the invoice moves from draft to payable state. PayPal then emails the customer a link to the invoice on the PayPal website. Customers with a PayPal account can log in and pay the invoice with PayPal. Alternatively, customers can pay as a guest with a debit card or credit card. For more information, see the <a href=\"/docs/invoicing/\">Invoicing Overview</a> and the <a href=\"/docs/invoicing/basic-integration/\">Invoicing Integration Guide</a>.

The version of the OpenAPI document: 2.3


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Error400 } from '../models';
// @ts-ignore
import { Error403 } from '../models';
// @ts-ignore
import { Error404 } from '../models';
// @ts-ignore
import { Error422 } from '../models';
// @ts-ignore
import { ErrorDefault } from '../models';
// @ts-ignore
import { LinkDescription } from '../models';
// @ts-ignore
import { Template } from '../models';
// @ts-ignore
import { TemplateInfo } from '../models';
// @ts-ignore
import { TemplateSettings } from '../models';
// @ts-ignore
import { Templates } from '../models';
// @ts-ignore
import { TemplatesCreateTemplate400Response } from '../models';
// @ts-ignore
import { TemplatesCreateTemplate422Response } from '../models';
// @ts-ignore
import { TemplatesCreateTemplateResponse } from '../models';
// @ts-ignore
import { TemplatesDeleteById403Response } from '../models';
// @ts-ignore
import { TemplatesDeleteByIdResponse } from '../models';
// @ts-ignore
import { TemplatesListDetails400Response } from '../models';
// @ts-ignore
import { TemplatesListDetailsResponse } from '../models';
// @ts-ignore
import { TemplatesShowDetailsById403Response } from '../models';
// @ts-ignore
import { TemplatesShowDetailsByIdResponse } from '../models';
// @ts-ignore
import { TemplatesUpdateFullTemplate403Response } from '../models';
// @ts-ignore
import { TemplatesUpdateFullTemplate422Response } from '../models';
// @ts-ignore
import { TemplatesUpdateFullTemplateResponse } from '../models';
// @ts-ignore
import { UnitOfMeasure } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TemplatesApi - axios parameter creator
 * @export
 */
export const TemplatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates an invoice template. You can use details from this template to create an invoice. You can create up to 50 templates.<blockquote><strong>Note:</strong> Every merchant starts with three PayPal system templates that are optimized for the unit type billed. The template includes `Quantity`, `Hours`, and `Amount`.</blockquote>
         * @summary Create template
         * @param {Template} template 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTemplate: async (template: Template, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'template' is not null or undefined
            assertParamExists('createTemplate', 'template', template)
            const localVarPath = `/v2/invoicing/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Oauth2", ["https://uri.paypal.com/services/invoicing/invoices/readwrite"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: template,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/invoicing/templates',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(template, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a template, by ID.
         * @summary Delete template
         * @param {string} templateId The ID of the template to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById: async (templateId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('deleteById', 'templateId', templateId)
            const localVarPath = `/v2/invoicing/templates/{template_id}`
                .replace(`{${"template_id"}}`, encodeURIComponent(String(templateId !== undefined ? templateId : `-template_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Oauth2", ["https://uri.paypal.com/services/invoicing/invoices/readwrite"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/invoicing/templates/{template_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists merchant-created templates with associated details. The associated details include the emails, addresses, and phone numbers from the user\'s PayPal profile.<br/>The user can select which values to show in the business information section of their template.
         * @summary List templates
         * @param {string} [fields] The fields to return in the response. Value is &#x60;all&#x60; or &#x60;none&#x60;. To return only the template name, ID, and default attributes, specify &#x60;none&#x60;.
         * @param {number} [page] The page number to be retrieved, for the list of templates. So, a combination of &#x60;page&#x3D;1&#x60; and &#x60;page_size&#x3D;20&#x60; returns the first 20 templates. A combination of &#x60;page&#x3D;2&#x60; and &#x60;page_size&#x3D;20&#x60; returns the next 20 templates.
         * @param {number} [pageSize] The maximum number of templates to return in the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDetails: async (fields?: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/invoicing/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Oauth2", ["https://uri.paypal.com/services/invoicing/invoices/read"], configuration)
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/invoicing/templates',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Shows details for a template, by ID.
         * @summary Show template details
         * @param {string} templateId The ID of the template to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showDetailsById: async (templateId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('showDetailsById', 'templateId', templateId)
            const localVarPath = `/v2/invoicing/templates/{template_id}`
                .replace(`{${"template_id"}}`, encodeURIComponent(String(templateId !== undefined ? templateId : `-template_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Oauth2", ["https://uri.paypal.com/services/invoicing/invoices/read"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/invoicing/templates/{template_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fully updates a template, by ID. In the JSON request body, include a complete `template` object. This call does not support partial updates.
         * @summary Fully update template
         * @param {string} templateId The ID of the template to delete.
         * @param {Template} template A representation of changes to make in the template.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFullTemplate: async (templateId: string, template: Template, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('updateFullTemplate', 'templateId', templateId)
            // verify required parameter 'template' is not null or undefined
            assertParamExists('updateFullTemplate', 'template', template)
            const localVarPath = `/v2/invoicing/templates/{template_id}`
                .replace(`{${"template_id"}}`, encodeURIComponent(String(templateId !== undefined ? templateId : `-template_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Oauth2", ["https://uri.paypal.com/services/invoicing/invoices/readwrite"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: template,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/invoicing/templates/{template_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(template, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TemplatesApi - functional programming interface
 * @export
 */
export const TemplatesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TemplatesApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates an invoice template. You can use details from this template to create an invoice. You can create up to 50 templates.<blockquote><strong>Note:</strong> Every merchant starts with three PayPal system templates that are optimized for the unit type billed. The template includes `Quantity`, `Hours`, and `Amount`.</blockquote>
         * @summary Create template
         * @param {TemplatesApiCreateTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTemplate(requestParameters: TemplatesApiCreateTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Template>> {
            const template: Template = {
                id: requestParameters.id,
                name: requestParameters.name,
                default_template: requestParameters.default_template,
                template_info: requestParameters.template_info,
                settings: requestParameters.settings,
                unit_of_measure: requestParameters.unit_of_measure,
                standard_template: requestParameters.standard_template,
                links: requestParameters.links
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTemplate(template, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a template, by ID.
         * @summary Delete template
         * @param {TemplatesApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteById(requestParameters: TemplatesApiDeleteByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteById(requestParameters.templateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists merchant-created templates with associated details. The associated details include the emails, addresses, and phone numbers from the user\'s PayPal profile.<br/>The user can select which values to show in the business information section of their template.
         * @summary List templates
         * @param {TemplatesApiListDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDetails(requestParameters: TemplatesApiListDetailsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Templates>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDetails(requestParameters.fields, requestParameters.page, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Shows details for a template, by ID.
         * @summary Show template details
         * @param {TemplatesApiShowDetailsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showDetailsById(requestParameters: TemplatesApiShowDetailsByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Template>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showDetailsById(requestParameters.templateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fully updates a template, by ID. In the JSON request body, include a complete `template` object. This call does not support partial updates.
         * @summary Fully update template
         * @param {TemplatesApiUpdateFullTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFullTemplate(requestParameters: TemplatesApiUpdateFullTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Template>> {
            const template: Template = {
                id: requestParameters.id,
                name: requestParameters.name,
                default_template: requestParameters.default_template,
                template_info: requestParameters.template_info,
                settings: requestParameters.settings,
                unit_of_measure: requestParameters.unit_of_measure,
                standard_template: requestParameters.standard_template,
                links: requestParameters.links
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFullTemplate(requestParameters.templateId, template, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TemplatesApi - factory interface
 * @export
 */
export const TemplatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TemplatesApiFp(configuration)
    return {
        /**
         * Creates an invoice template. You can use details from this template to create an invoice. You can create up to 50 templates.<blockquote><strong>Note:</strong> Every merchant starts with three PayPal system templates that are optimized for the unit type billed. The template includes `Quantity`, `Hours`, and `Amount`.</blockquote>
         * @summary Create template
         * @param {TemplatesApiCreateTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTemplate(requestParameters: TemplatesApiCreateTemplateRequest, options?: AxiosRequestConfig): AxiosPromise<Template> {
            return localVarFp.createTemplate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a template, by ID.
         * @summary Delete template
         * @param {TemplatesApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById(requestParameters: TemplatesApiDeleteByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists merchant-created templates with associated details. The associated details include the emails, addresses, and phone numbers from the user\'s PayPal profile.<br/>The user can select which values to show in the business information section of their template.
         * @summary List templates
         * @param {TemplatesApiListDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDetails(requestParameters: TemplatesApiListDetailsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Templates> {
            return localVarFp.listDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Shows details for a template, by ID.
         * @summary Show template details
         * @param {TemplatesApiShowDetailsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showDetailsById(requestParameters: TemplatesApiShowDetailsByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Template> {
            return localVarFp.showDetailsById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fully updates a template, by ID. In the JSON request body, include a complete `template` object. This call does not support partial updates.
         * @summary Fully update template
         * @param {TemplatesApiUpdateFullTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFullTemplate(requestParameters: TemplatesApiUpdateFullTemplateRequest, options?: AxiosRequestConfig): AxiosPromise<Template> {
            return localVarFp.updateFullTemplate(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createTemplate operation in TemplatesApi.
 * @export
 * @interface TemplatesApiCreateTemplateRequest
 */
export type TemplatesApiCreateTemplateRequest = {
    
} & Template

/**
 * Request parameters for deleteById operation in TemplatesApi.
 * @export
 * @interface TemplatesApiDeleteByIdRequest
 */
export type TemplatesApiDeleteByIdRequest = {
    
    /**
    * The ID of the template to delete.
    * @type {string}
    * @memberof TemplatesApiDeleteById
    */
    readonly templateId: string
    
}

/**
 * Request parameters for listDetails operation in TemplatesApi.
 * @export
 * @interface TemplatesApiListDetailsRequest
 */
export type TemplatesApiListDetailsRequest = {
    
    /**
    * The fields to return in the response. Value is `all` or `none`. To return only the template name, ID, and default attributes, specify `none`.
    * @type {string}
    * @memberof TemplatesApiListDetails
    */
    readonly fields?: string
    
    /**
    * The page number to be retrieved, for the list of templates. So, a combination of `page=1` and `page_size=20` returns the first 20 templates. A combination of `page=2` and `page_size=20` returns the next 20 templates.
    * @type {number}
    * @memberof TemplatesApiListDetails
    */
    readonly page?: number
    
    /**
    * The maximum number of templates to return in the response.
    * @type {number}
    * @memberof TemplatesApiListDetails
    */
    readonly pageSize?: number
    
}

/**
 * Request parameters for showDetailsById operation in TemplatesApi.
 * @export
 * @interface TemplatesApiShowDetailsByIdRequest
 */
export type TemplatesApiShowDetailsByIdRequest = {
    
    /**
    * The ID of the template to delete.
    * @type {string}
    * @memberof TemplatesApiShowDetailsById
    */
    readonly templateId: string
    
}

/**
 * Request parameters for updateFullTemplate operation in TemplatesApi.
 * @export
 * @interface TemplatesApiUpdateFullTemplateRequest
 */
export type TemplatesApiUpdateFullTemplateRequest = {
    
    /**
    * The ID of the template to delete.
    * @type {string}
    * @memberof TemplatesApiUpdateFullTemplate
    */
    readonly templateId: string
    
} & Template

/**
 * TemplatesApiGenerated - object-oriented interface
 * @export
 * @class TemplatesApiGenerated
 * @extends {BaseAPI}
 */
export class TemplatesApiGenerated extends BaseAPI {
    /**
     * Creates an invoice template. You can use details from this template to create an invoice. You can create up to 50 templates.<blockquote><strong>Note:</strong> Every merchant starts with three PayPal system templates that are optimized for the unit type billed. The template includes `Quantity`, `Hours`, and `Amount`.</blockquote>
     * @summary Create template
     * @param {TemplatesApiCreateTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApiGenerated
     */
    public createTemplate(requestParameters: TemplatesApiCreateTemplateRequest, options?: AxiosRequestConfig) {
        return TemplatesApiFp(this.configuration).createTemplate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a template, by ID.
     * @summary Delete template
     * @param {TemplatesApiDeleteByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApiGenerated
     */
    public deleteById(requestParameters: TemplatesApiDeleteByIdRequest, options?: AxiosRequestConfig) {
        return TemplatesApiFp(this.configuration).deleteById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists merchant-created templates with associated details. The associated details include the emails, addresses, and phone numbers from the user\'s PayPal profile.<br/>The user can select which values to show in the business information section of their template.
     * @summary List templates
     * @param {TemplatesApiListDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApiGenerated
     */
    public listDetails(requestParameters: TemplatesApiListDetailsRequest = {}, options?: AxiosRequestConfig) {
        return TemplatesApiFp(this.configuration).listDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Shows details for a template, by ID.
     * @summary Show template details
     * @param {TemplatesApiShowDetailsByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApiGenerated
     */
    public showDetailsById(requestParameters: TemplatesApiShowDetailsByIdRequest, options?: AxiosRequestConfig) {
        return TemplatesApiFp(this.configuration).showDetailsById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fully updates a template, by ID. In the JSON request body, include a complete `template` object. This call does not support partial updates.
     * @summary Fully update template
     * @param {TemplatesApiUpdateFullTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApiGenerated
     */
    public updateFullTemplate(requestParameters: TemplatesApiUpdateFullTemplateRequest, options?: AxiosRequestConfig) {
        return TemplatesApiFp(this.configuration).updateFullTemplate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
