/* tslint:disable */
/* eslint-disable */
/*
Invoices

Use the Invoicing API to create, send, and manage invoices. You can also use the API or webhooks to track invoice payments. When you send an invoice to a customer, the invoice moves from draft to payable state. PayPal then emails the customer a link to the invoice on the PayPal website. Customers with a PayPal account can log in and pay the invoice with PayPal. Alternatively, customers can pay as a guest with a debit card or credit card. For more information, see the <a href=\"/docs/invoicing/\">Invoicing Overview</a> and the <a href=\"/docs/invoicing/basic-integration/\">Invoicing Integration Guide</a>.

The version of the OpenAPI document: 2.3


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AmountSummaryDetail } from '../models';
// @ts-ignore
import { Configuration } from '../models';
// @ts-ignore
import { ContactNameAddress } from '../models';
// @ts-ignore
import { Error400 } from '../models';
// @ts-ignore
import { Error403 } from '../models';
// @ts-ignore
import { Error404 } from '../models';
// @ts-ignore
import { Error422 } from '../models';
// @ts-ignore
import { ErrorDefault } from '../models';
// @ts-ignore
import { Invoice } from '../models';
// @ts-ignore
import { InvoiceDetail } from '../models';
// @ts-ignore
import { InvoiceNumber } from '../models';
// @ts-ignore
import { InvoiceStatus } from '../models';
// @ts-ignore
import { InvoicerInfo } from '../models';
// @ts-ignore
import { Invoices } from '../models';
// @ts-ignore
import { InvoicesCancelSentInvoice403Response } from '../models';
// @ts-ignore
import { InvoicesCancelSentInvoice422Response } from '../models';
// @ts-ignore
import { InvoicesCancelSentInvoiceResponse } from '../models';
// @ts-ignore
import { InvoicesCreateDraftInvoice400Response } from '../models';
// @ts-ignore
import { InvoicesCreateDraftInvoice422Response } from '../models';
// @ts-ignore
import { InvoicesCreateDraftInvoiceResponse } from '../models';
// @ts-ignore
import { InvoicesDeleteDraftOrScheduledInvoiceResponse } from '../models';
// @ts-ignore
import { InvoicesDeleteExternalPayment422Response } from '../models';
// @ts-ignore
import { InvoicesDeleteExternalPaymentResponse } from '../models';
// @ts-ignore
import { InvoicesDeleteExternalRefund403Response } from '../models';
// @ts-ignore
import { InvoicesDeleteExternalRefundResponse } from '../models';
// @ts-ignore
import { InvoicesGenerateQrCode403Response } from '../models';
// @ts-ignore
import { InvoicesGenerateQrCodeResponse } from '../models';
// @ts-ignore
import { InvoicesGetDetailsResponse } from '../models';
// @ts-ignore
import { InvoicesGetInvoices400Response } from '../models';
// @ts-ignore
import { InvoicesGetInvoicesResponse } from '../models';
// @ts-ignore
import { InvoicesRecordPayment400Response } from '../models';
// @ts-ignore
import { InvoicesRecordPayment403Response } from '../models';
// @ts-ignore
import { InvoicesRecordPayment422Response } from '../models';
// @ts-ignore
import { InvoicesRecordPaymentResponse } from '../models';
// @ts-ignore
import { InvoicesRecordRefund400Response } from '../models';
// @ts-ignore
import { InvoicesRecordRefund403Response } from '../models';
// @ts-ignore
import { InvoicesRecordRefund422Response } from '../models';
// @ts-ignore
import { InvoicesRecordRefundResponse } from '../models';
// @ts-ignore
import { InvoicesSendReminder400Response } from '../models';
// @ts-ignore
import { InvoicesSendReminder403Response } from '../models';
// @ts-ignore
import { InvoicesSendReminder422Response } from '../models';
// @ts-ignore
import { InvoicesSendReminderResponse } from '../models';
// @ts-ignore
import { InvoicesUpdateFullInvoice400Response } from '../models';
// @ts-ignore
import { InvoicesUpdateFullInvoice403Response } from '../models';
// @ts-ignore
import { InvoicesUpdateFullInvoice422Response } from '../models';
// @ts-ignore
import { InvoicesUpdateFullInvoiceResponse } from '../models';
// @ts-ignore
import { Item } from '../models';
// @ts-ignore
import { LinkDescription } from '../models';
// @ts-ignore
import { Model202Response } from '../models';
// @ts-ignore
import { Money } from '../models';
// @ts-ignore
import { Notification } from '../models';
// @ts-ignore
import { PaymentDetail } from '../models';
// @ts-ignore
import { PaymentMethod } from '../models';
// @ts-ignore
import { PaymentReference } from '../models';
// @ts-ignore
import { PaymentType } from '../models';
// @ts-ignore
import { Payments } from '../models';
// @ts-ignore
import { QrConfig } from '../models';
// @ts-ignore
import { RecipientInfo } from '../models';
// @ts-ignore
import { RefundDetail } from '../models';
// @ts-ignore
import { RefundReference } from '../models';
// @ts-ignore
import { Refunds } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * InvoicesApi - axios parameter creator
 * @export
 */
export const InvoicesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cancels a sent invoice, by ID, and, optionally, sends a notification about the cancellation to the payer, merchant, and CC: emails.
         * @summary Cancel sent invoice
         * @param {string} invoiceId The ID of the draft invoice to delete.
         * @param {Notification} notification The email or SMS notification that will be sent to the payer on cancellation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSentInvoice: async (invoiceId: string, notification: Notification, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoiceId' is not null or undefined
            assertParamExists('cancelSentInvoice', 'invoiceId', invoiceId)
            // verify required parameter 'notification' is not null or undefined
            assertParamExists('cancelSentInvoice', 'notification', notification)
            const localVarPath = `/v2/invoicing/invoices/{invoice_id}/cancel`
                .replace(`{${"invoice_id"}}`, encodeURIComponent(String(invoiceId !== undefined ? invoiceId : `-invoice_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Oauth2", ["https://uri.paypal.com/services/invoicing/invoices/readwrite"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: notification,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/invoicing/invoices/{invoice_id}/cancel',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(notification, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a draft invoice. To move the invoice from a draft to payable state, you must <a href=\"#invoices_send\">send the invoice</a>.<br/><br/>In the JSON request body, include invoice details including merchant information. The <code>invoice</code> object must include an <code>items</code> array.<blockquote><strong>Note:</strong> The merchant that you specify in an invoice must have a PayPal account in good standing.</blockquote>.
         * @summary Create draft invoice
         * @param {Invoice} invoice The invoice details which includes all information of the invoice like items, billing information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDraftInvoice: async (invoice: Invoice, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoice' is not null or undefined
            assertParamExists('createDraftInvoice', 'invoice', invoice)
            const localVarPath = `/v2/invoicing/invoices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Oauth2", ["https://uri.paypal.com/services/invoicing/invoices/readwrite"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: invoice,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/invoicing/invoices',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(invoice, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a draft or scheduled invoice, by ID. Deletes invoices in the draft or scheduled state only. For invoices that have already been sent, you can <a href=\"/docs/api/invoicing/v2/#invoices_cancel\">cancel the invoice</a>. After you delete a draft or scheduled invoice, you can no longer use it or show its details. However, you can reuse its invoice number.
         * @summary Delete invoice
         * @param {string} invoiceId The ID of the draft invoice to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDraftOrScheduledInvoice: async (invoiceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoiceId' is not null or undefined
            assertParamExists('deleteDraftOrScheduledInvoice', 'invoiceId', invoiceId)
            const localVarPath = `/v2/invoicing/invoices/{invoice_id}`
                .replace(`{${"invoice_id"}}`, encodeURIComponent(String(invoiceId !== undefined ? invoiceId : `-invoice_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Oauth2", ["https://uri.paypal.com/services/invoicing/invoices/readwrite"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/invoicing/invoices/{invoice_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an external payment, by invoice ID and transaction ID.
         * @summary Delete external payment
         * @param {string} invoiceId The ID of the draft invoice to delete.
         * @param {string} transactionId The ID of the external refund transaction to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExternalPayment: async (invoiceId: string, transactionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoiceId' is not null or undefined
            assertParamExists('deleteExternalPayment', 'invoiceId', invoiceId)
            // verify required parameter 'transactionId' is not null or undefined
            assertParamExists('deleteExternalPayment', 'transactionId', transactionId)
            const localVarPath = `/v2/invoicing/invoices/{invoice_id}/payments/{transaction_id}`
                .replace(`{${"invoice_id"}}`, encodeURIComponent(String(invoiceId !== undefined ? invoiceId : `-invoice_id-`)))
                .replace(`{${"transaction_id"}}`, encodeURIComponent(String(transactionId !== undefined ? transactionId : `-transaction_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Oauth2", ["https://uri.paypal.com/services/invoicing/invoices/readwrite"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/invoicing/invoices/{invoice_id}/payments/{transaction_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an external refund, by invoice ID and transaction ID.
         * @summary Delete external refund
         * @param {string} invoiceId The ID of the draft invoice to delete.
         * @param {string} transactionId The ID of the external refund transaction to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExternalRefund: async (invoiceId: string, transactionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoiceId' is not null or undefined
            assertParamExists('deleteExternalRefund', 'invoiceId', invoiceId)
            // verify required parameter 'transactionId' is not null or undefined
            assertParamExists('deleteExternalRefund', 'transactionId', transactionId)
            const localVarPath = `/v2/invoicing/invoices/{invoice_id}/refunds/{transaction_id}`
                .replace(`{${"invoice_id"}}`, encodeURIComponent(String(invoiceId !== undefined ? invoiceId : `-invoice_id-`)))
                .replace(`{${"transaction_id"}}`, encodeURIComponent(String(transactionId !== undefined ? transactionId : `-transaction_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Oauth2", ["https://uri.paypal.com/services/invoicing/invoices/readwrite"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/invoicing/invoices/{invoice_id}/refunds/{transaction_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generates the next invoice number that is available to the merchant. The next invoice number uses the prefix and suffix from the last invoice number and increments the number by one. For example, the next invoice number after `INVOICE-1234` is `INVOICE-1235`.
         * @summary Generate invoice number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateNextInvoiceNumber: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/invoicing/generate-next-invoice-number`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Oauth2", ["https://uri.paypal.com/services/invoicing/invoices/readwrite"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/invoicing/generate-next-invoice-number',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generates a QR code for an invoice, by ID. The QR code is a PNG image in <a href=\"https://www.base64encode.org/\">Base64-encoded</a> format that corresponds to the invoice ID. You can generate a QR code for an invoice and add it to a paper or PDF invoice. When customers use their mobile devices to scan the QR code, they are redirected to the PayPal mobile payment flow where they can view the invoice and pay online with PayPal or a credit card. Before you get a QR code, you must <a href=\"#invoices_create\">create an invoice</a> and <a href=\"#invoices_send\">send an invoice</a> to move the invoice from a draft to payable state. Do not include an email address if you do not want the invoice emailed.
         * @summary Generate QR code
         * @param {string} invoiceId The ID of the draft invoice to delete.
         * @param {QrConfig} [qrConfig] Optional configuration parameters to adjust QR code width, height and the encoded URL.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateQrCode: async (invoiceId: string, qrConfig?: QrConfig, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoiceId' is not null or undefined
            assertParamExists('generateQrCode', 'invoiceId', invoiceId)
            const localVarPath = `/v2/invoicing/invoices/{invoice_id}/generate-qr-code`
                .replace(`{${"invoice_id"}}`, encodeURIComponent(String(invoiceId !== undefined ? invoiceId : `-invoice_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Oauth2", ["https://uri.paypal.com/services/invoicing/invoices/readwrite"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: qrConfig,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/invoicing/invoices/{invoice_id}/generate-qr-code',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(qrConfig, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Shows details for an invoice, by ID.
         * @summary Show invoice details
         * @param {string} invoiceId The ID of the draft invoice to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails: async (invoiceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoiceId' is not null or undefined
            assertParamExists('getDetails', 'invoiceId', invoiceId)
            const localVarPath = `/v2/invoicing/invoices/{invoice_id}`
                .replace(`{${"invoice_id"}}`, encodeURIComponent(String(invoiceId !== undefined ? invoiceId : `-invoice_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Oauth2", ["https://uri.paypal.com/services/invoicing/invoices/read"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/invoicing/invoices/{invoice_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists invoices. To filter the invoices that appear in the response, you can specify one or more optional query parameters.
         * @summary List invoices
         * @param {number} [page] The page number to be retrieved, for the list of templates. So, a combination of &#x60;page&#x3D;1&#x60; and &#x60;page_size&#x3D;20&#x60; returns the first 20 templates. A combination of &#x60;page&#x3D;2&#x60; and &#x60;page_size&#x3D;20&#x60; returns the next 20 templates.
         * @param {number} [pageSize] The maximum number of templates to return in the response.
         * @param {boolean} [totalRequired] Indicates whether the to show &lt;code&gt;total_pages&lt;/code&gt; and &lt;code&gt;total_items&lt;/code&gt; in the response.
         * @param {string} [fields] The fields to return in the response. Value is &#x60;all&#x60; or &#x60;none&#x60;. To return only the template name, ID, and default attributes, specify &#x60;none&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvoices: async (page?: number, pageSize?: number, totalRequired?: boolean, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/invoicing/invoices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Oauth2", ["https://uri.paypal.com/services/invoicing/invoices/read"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (totalRequired !== undefined) {
                localVarQueryParameter['total_required'] = totalRequired;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/invoicing/invoices',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Records a payment for the invoice. If no payment is due, the invoice is marked as `PAID`. Otherwise, the invoice is marked as `PARTIALLY PAID`.
         * @summary Record payment for invoice
         * @param {string} invoiceId The ID of the draft invoice to delete.
         * @param {PaymentDetail} paymentDetail The details of the payment to record against the invoice.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordPayment: async (invoiceId: string, paymentDetail: PaymentDetail, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoiceId' is not null or undefined
            assertParamExists('recordPayment', 'invoiceId', invoiceId)
            // verify required parameter 'paymentDetail' is not null or undefined
            assertParamExists('recordPayment', 'paymentDetail', paymentDetail)
            const localVarPath = `/v2/invoicing/invoices/{invoice_id}/payments`
                .replace(`{${"invoice_id"}}`, encodeURIComponent(String(invoiceId !== undefined ? invoiceId : `-invoice_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Oauth2", ["https://uri.paypal.com/services/invoicing/invoices/readwrite"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: paymentDetail,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/invoicing/invoices/{invoice_id}/payments',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(paymentDetail, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Records a refund for the invoice. If all payments are refunded, the invoice is marked as `REFUNDED`. Otherwise, the invoice is marked as `PARTIALLY REFUNDED`.
         * @summary Record refund for invoice
         * @param {string} invoiceId The ID of the draft invoice to delete.
         * @param {RefundDetail} refundDetail The details of the refund to record against the invoice.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordRefund: async (invoiceId: string, refundDetail: RefundDetail, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoiceId' is not null or undefined
            assertParamExists('recordRefund', 'invoiceId', invoiceId)
            // verify required parameter 'refundDetail' is not null or undefined
            assertParamExists('recordRefund', 'refundDetail', refundDetail)
            const localVarPath = `/v2/invoicing/invoices/{invoice_id}/refunds`
                .replace(`{${"invoice_id"}}`, encodeURIComponent(String(invoiceId !== undefined ? invoiceId : `-invoice_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Oauth2", ["https://uri.paypal.com/services/invoicing/invoices/readwrite"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: refundDetail,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/invoicing/invoices/{invoice_id}/refunds',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(refundDetail, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends or schedules an invoice, by ID, to be sent to a customer. The action depends on the invoice issue date:<ul><li>If the invoice issue date is current or in the past, sends the invoice immediately.</li><li>If the invoice issue date is in the future, schedules the invoice to be sent on that date.</li></ul>To suppress the merchant\'s email notification, set the `send_to_invoicer` body parameter to `false`. To send the invoice through a share link and not through PayPal, set the <code>send_to_recipient</code> parameter to <code>false</code> in the <code>notification</code> object. The <code>send_to_recipient</code> parameter does not apply to a future issue date because the invoice is scheduled to be sent through PayPal on that date.<blockquote><strong>Notes:</strong><ul><li>After you send an invoice, resending it has no effect.</li><li>To send a notification for updates, <a href=\"#invoices_update\">update the invoice</a> and set the <code>send_to_recipient</code> body parameter to <code>true</code>.</li></ul></blockquote>
         * @summary Send invoice
         * @param {string} invoiceId The ID of the draft invoice to delete.
         * @param {Notification} [notification] The email or SMS notification to send to the payer when they send an invoice..
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendInvoice: async (invoiceId: string, notification?: Notification, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoiceId' is not null or undefined
            assertParamExists('sendInvoice', 'invoiceId', invoiceId)
            const localVarPath = `/v2/invoicing/invoices/{invoice_id}/send`
                .replace(`{${"invoice_id"}}`, encodeURIComponent(String(invoiceId !== undefined ? invoiceId : `-invoice_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Oauth2", ["https://uri.paypal.com/services/invoicing/invoices/readwrite"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: notification,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/invoicing/invoices/{invoice_id}/send',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(notification, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends a reminder to the payer about an invoice, by ID. In the JSON request body, include a `notification` object that defines the subject of the reminder and other details.
         * @summary Send invoice reminder
         * @param {string} invoiceId The ID of the draft invoice to delete.
         * @param {Notification} [notification] The email or SMS notification that will be sent to the payer for reminder.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendReminder: async (invoiceId: string, notification?: Notification, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoiceId' is not null or undefined
            assertParamExists('sendReminder', 'invoiceId', invoiceId)
            const localVarPath = `/v2/invoicing/invoices/{invoice_id}/remind`
                .replace(`{${"invoice_id"}}`, encodeURIComponent(String(invoiceId !== undefined ? invoiceId : `-invoice_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Oauth2", ["https://uri.paypal.com/services/invoicing/invoices/readwrite"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: notification,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/invoicing/invoices/{invoice_id}/remind',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(notification, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fully updates an invoice, by ID. In the JSON request body, include a complete `invoice` object. This call does not support partial updates.
         * @summary Fully update invoice
         * @param {string} invoiceId The ID of the draft invoice to delete.
         * @param {Invoice} invoice A representation of changes to make in the invoice.
         * @param {boolean} [sendToRecipient] Indicates whether to send the invoice update notification to the recipient.
         * @param {boolean} [sendToInvoicer] Indicates whether to send the invoice update notification to the merchant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFullInvoice: async (invoiceId: string, invoice: Invoice, sendToRecipient?: boolean, sendToInvoicer?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoiceId' is not null or undefined
            assertParamExists('updateFullInvoice', 'invoiceId', invoiceId)
            // verify required parameter 'invoice' is not null or undefined
            assertParamExists('updateFullInvoice', 'invoice', invoice)
            const localVarPath = `/v2/invoicing/invoices/{invoice_id}`
                .replace(`{${"invoice_id"}}`, encodeURIComponent(String(invoiceId !== undefined ? invoiceId : `-invoice_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Oauth2", ["https://uri.paypal.com/services/invoicing/invoices/readwrite"], configuration)
            if (sendToRecipient !== undefined) {
                localVarQueryParameter['send_to_recipient'] = sendToRecipient;
            }

            if (sendToInvoicer !== undefined) {
                localVarQueryParameter['send_to_invoicer'] = sendToInvoicer;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: invoice,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/invoicing/invoices/{invoice_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(invoice, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InvoicesApi - functional programming interface
 * @export
 */
export const InvoicesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InvoicesApiAxiosParamCreator(configuration)
    return {
        /**
         * Cancels a sent invoice, by ID, and, optionally, sends a notification about the cancellation to the payer, merchant, and CC: emails.
         * @summary Cancel sent invoice
         * @param {InvoicesApiCancelSentInvoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelSentInvoice(requestParameters: InvoicesApiCancelSentInvoiceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const notification: Notification = {
                subject: requestParameters.subject,
                note: requestParameters.note,
                send_to_invoicer: requestParameters.send_to_invoicer,
                send_to_recipient: requestParameters.send_to_recipient,
                additional_recipients: requestParameters.additional_recipients
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelSentInvoice(requestParameters.invoiceId, notification, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a draft invoice. To move the invoice from a draft to payable state, you must <a href=\"#invoices_send\">send the invoice</a>.<br/><br/>In the JSON request body, include invoice details including merchant information. The <code>invoice</code> object must include an <code>items</code> array.<blockquote><strong>Note:</strong> The merchant that you specify in an invoice must have a PayPal account in good standing.</blockquote>.
         * @summary Create draft invoice
         * @param {InvoicesApiCreateDraftInvoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDraftInvoice(requestParameters: InvoicesApiCreateDraftInvoiceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Invoice>> {
            const invoice: Invoice = {
                id: requestParameters.id,
                parent_id: requestParameters.parent_id,
                status: requestParameters.status,
                detail: requestParameters.detail,
                invoicer: requestParameters.invoicer,
                primary_recipients: requestParameters.primary_recipients,
                additional_recipients: requestParameters.additional_recipients,
                items: requestParameters.items,
                configuration: requestParameters.configuration,
                amount: requestParameters.amount,
                due_amount: requestParameters.due_amount,
                gratuity: requestParameters.gratuity,
                payments: requestParameters.payments,
                refunds: requestParameters.refunds,
                links: requestParameters.links
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDraftInvoice(invoice, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a draft or scheduled invoice, by ID. Deletes invoices in the draft or scheduled state only. For invoices that have already been sent, you can <a href=\"/docs/api/invoicing/v2/#invoices_cancel\">cancel the invoice</a>. After you delete a draft or scheduled invoice, you can no longer use it or show its details. However, you can reuse its invoice number.
         * @summary Delete invoice
         * @param {InvoicesApiDeleteDraftOrScheduledInvoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDraftOrScheduledInvoice(requestParameters: InvoicesApiDeleteDraftOrScheduledInvoiceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDraftOrScheduledInvoice(requestParameters.invoiceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes an external payment, by invoice ID and transaction ID.
         * @summary Delete external payment
         * @param {InvoicesApiDeleteExternalPaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExternalPayment(requestParameters: InvoicesApiDeleteExternalPaymentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteExternalPayment(requestParameters.invoiceId, requestParameters.transactionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes an external refund, by invoice ID and transaction ID.
         * @summary Delete external refund
         * @param {InvoicesApiDeleteExternalRefundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExternalRefund(requestParameters: InvoicesApiDeleteExternalRefundRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteExternalRefund(requestParameters.invoiceId, requestParameters.transactionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generates the next invoice number that is available to the merchant. The next invoice number uses the prefix and suffix from the last invoice number and increments the number by one. For example, the next invoice number after `INVOICE-1234` is `INVOICE-1235`.
         * @summary Generate invoice number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateNextInvoiceNumber(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvoiceNumber>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateNextInvoiceNumber(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generates a QR code for an invoice, by ID. The QR code is a PNG image in <a href=\"https://www.base64encode.org/\">Base64-encoded</a> format that corresponds to the invoice ID. You can generate a QR code for an invoice and add it to a paper or PDF invoice. When customers use their mobile devices to scan the QR code, they are redirected to the PayPal mobile payment flow where they can view the invoice and pay online with PayPal or a credit card. Before you get a QR code, you must <a href=\"#invoices_create\">create an invoice</a> and <a href=\"#invoices_send\">send an invoice</a> to move the invoice from a draft to payable state. Do not include an email address if you do not want the invoice emailed.
         * @summary Generate QR code
         * @param {InvoicesApiGenerateQrCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateQrCode(requestParameters: InvoicesApiGenerateQrCodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const qrConfig: QrConfig = {
                width: requestParameters.width,
                height: requestParameters.height,
                action: requestParameters.action
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateQrCode(requestParameters.invoiceId, qrConfig, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Shows details for an invoice, by ID.
         * @summary Show invoice details
         * @param {InvoicesApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetails(requestParameters: InvoicesApiGetDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Invoice>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetails(requestParameters.invoiceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists invoices. To filter the invoices that appear in the response, you can specify one or more optional query parameters.
         * @summary List invoices
         * @param {InvoicesApiGetInvoicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInvoices(requestParameters: InvoicesApiGetInvoicesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Invoices>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInvoices(requestParameters.page, requestParameters.pageSize, requestParameters.totalRequired, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Records a payment for the invoice. If no payment is due, the invoice is marked as `PAID`. Otherwise, the invoice is marked as `PARTIALLY PAID`.
         * @summary Record payment for invoice
         * @param {InvoicesApiRecordPaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recordPayment(requestParameters: InvoicesApiRecordPaymentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentReference>> {
            const paymentDetail: PaymentDetail = {
                type: requestParameters.type,
                payment_id: requestParameters.payment_id,
                payment_date: requestParameters.payment_date,
                method: requestParameters.method,
                note: requestParameters.note,
                amount: requestParameters.amount,
                shipping_info: requestParameters.shipping_info
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.recordPayment(requestParameters.invoiceId, paymentDetail, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Records a refund for the invoice. If all payments are refunded, the invoice is marked as `REFUNDED`. Otherwise, the invoice is marked as `PARTIALLY REFUNDED`.
         * @summary Record refund for invoice
         * @param {InvoicesApiRecordRefundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recordRefund(requestParameters: InvoicesApiRecordRefundRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefundReference>> {
            const refundDetail: RefundDetail = {
                type: requestParameters.type,
                refund_id: requestParameters.refund_id,
                refund_date: requestParameters.refund_date,
                amount: requestParameters.amount,
                method: requestParameters.method
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.recordRefund(requestParameters.invoiceId, refundDetail, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sends or schedules an invoice, by ID, to be sent to a customer. The action depends on the invoice issue date:<ul><li>If the invoice issue date is current or in the past, sends the invoice immediately.</li><li>If the invoice issue date is in the future, schedules the invoice to be sent on that date.</li></ul>To suppress the merchant\'s email notification, set the `send_to_invoicer` body parameter to `false`. To send the invoice through a share link and not through PayPal, set the <code>send_to_recipient</code> parameter to <code>false</code> in the <code>notification</code> object. The <code>send_to_recipient</code> parameter does not apply to a future issue date because the invoice is scheduled to be sent through PayPal on that date.<blockquote><strong>Notes:</strong><ul><li>After you send an invoice, resending it has no effect.</li><li>To send a notification for updates, <a href=\"#invoices_update\">update the invoice</a> and set the <code>send_to_recipient</code> body parameter to <code>true</code>.</li></ul></blockquote>
         * @summary Send invoice
         * @param {InvoicesApiSendInvoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendInvoice(requestParameters: InvoicesApiSendInvoiceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LinkDescription>> {
            const notification: Notification = {
                subject: requestParameters.subject,
                note: requestParameters.note,
                send_to_invoicer: requestParameters.send_to_invoicer,
                send_to_recipient: requestParameters.send_to_recipient,
                additional_recipients: requestParameters.additional_recipients
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendInvoice(requestParameters.invoiceId, notification, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sends a reminder to the payer about an invoice, by ID. In the JSON request body, include a `notification` object that defines the subject of the reminder and other details.
         * @summary Send invoice reminder
         * @param {InvoicesApiSendReminderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendReminder(requestParameters: InvoicesApiSendReminderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const notification: Notification = {
                subject: requestParameters.subject,
                note: requestParameters.note,
                send_to_invoicer: requestParameters.send_to_invoicer,
                send_to_recipient: requestParameters.send_to_recipient,
                additional_recipients: requestParameters.additional_recipients
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendReminder(requestParameters.invoiceId, notification, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fully updates an invoice, by ID. In the JSON request body, include a complete `invoice` object. This call does not support partial updates.
         * @summary Fully update invoice
         * @param {InvoicesApiUpdateFullInvoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFullInvoice(requestParameters: InvoicesApiUpdateFullInvoiceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Invoice>> {
            const invoice: Invoice = {
                id: requestParameters.id,
                parent_id: requestParameters.parent_id,
                status: requestParameters.status,
                detail: requestParameters.detail,
                invoicer: requestParameters.invoicer,
                primary_recipients: requestParameters.primary_recipients,
                additional_recipients: requestParameters.additional_recipients,
                items: requestParameters.items,
                configuration: requestParameters.configuration,
                amount: requestParameters.amount,
                due_amount: requestParameters.due_amount,
                gratuity: requestParameters.gratuity,
                payments: requestParameters.payments,
                refunds: requestParameters.refunds,
                links: requestParameters.links
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFullInvoice(requestParameters.invoiceId, invoice, requestParameters.sendToRecipient, requestParameters.sendToInvoicer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InvoicesApi - factory interface
 * @export
 */
export const InvoicesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InvoicesApiFp(configuration)
    return {
        /**
         * Cancels a sent invoice, by ID, and, optionally, sends a notification about the cancellation to the payer, merchant, and CC: emails.
         * @summary Cancel sent invoice
         * @param {InvoicesApiCancelSentInvoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSentInvoice(requestParameters: InvoicesApiCancelSentInvoiceRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cancelSentInvoice(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a draft invoice. To move the invoice from a draft to payable state, you must <a href=\"#invoices_send\">send the invoice</a>.<br/><br/>In the JSON request body, include invoice details including merchant information. The <code>invoice</code> object must include an <code>items</code> array.<blockquote><strong>Note:</strong> The merchant that you specify in an invoice must have a PayPal account in good standing.</blockquote>.
         * @summary Create draft invoice
         * @param {InvoicesApiCreateDraftInvoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDraftInvoice(requestParameters: InvoicesApiCreateDraftInvoiceRequest, options?: AxiosRequestConfig): AxiosPromise<Invoice> {
            return localVarFp.createDraftInvoice(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a draft or scheduled invoice, by ID. Deletes invoices in the draft or scheduled state only. For invoices that have already been sent, you can <a href=\"/docs/api/invoicing/v2/#invoices_cancel\">cancel the invoice</a>. After you delete a draft or scheduled invoice, you can no longer use it or show its details. However, you can reuse its invoice number.
         * @summary Delete invoice
         * @param {InvoicesApiDeleteDraftOrScheduledInvoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDraftOrScheduledInvoice(requestParameters: InvoicesApiDeleteDraftOrScheduledInvoiceRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteDraftOrScheduledInvoice(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an external payment, by invoice ID and transaction ID.
         * @summary Delete external payment
         * @param {InvoicesApiDeleteExternalPaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExternalPayment(requestParameters: InvoicesApiDeleteExternalPaymentRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteExternalPayment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an external refund, by invoice ID and transaction ID.
         * @summary Delete external refund
         * @param {InvoicesApiDeleteExternalRefundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExternalRefund(requestParameters: InvoicesApiDeleteExternalRefundRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteExternalRefund(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Generates the next invoice number that is available to the merchant. The next invoice number uses the prefix and suffix from the last invoice number and increments the number by one. For example, the next invoice number after `INVOICE-1234` is `INVOICE-1235`.
         * @summary Generate invoice number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateNextInvoiceNumber(options?: AxiosRequestConfig): AxiosPromise<InvoiceNumber> {
            return localVarFp.generateNextInvoiceNumber(options).then((request) => request(axios, basePath));
        },
        /**
         * Generates a QR code for an invoice, by ID. The QR code is a PNG image in <a href=\"https://www.base64encode.org/\">Base64-encoded</a> format that corresponds to the invoice ID. You can generate a QR code for an invoice and add it to a paper or PDF invoice. When customers use their mobile devices to scan the QR code, they are redirected to the PayPal mobile payment flow where they can view the invoice and pay online with PayPal or a credit card. Before you get a QR code, you must <a href=\"#invoices_create\">create an invoice</a> and <a href=\"#invoices_send\">send an invoice</a> to move the invoice from a draft to payable state. Do not include an email address if you do not want the invoice emailed.
         * @summary Generate QR code
         * @param {InvoicesApiGenerateQrCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateQrCode(requestParameters: InvoicesApiGenerateQrCodeRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.generateQrCode(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Shows details for an invoice, by ID.
         * @summary Show invoice details
         * @param {InvoicesApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails(requestParameters: InvoicesApiGetDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<Invoice> {
            return localVarFp.getDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists invoices. To filter the invoices that appear in the response, you can specify one or more optional query parameters.
         * @summary List invoices
         * @param {InvoicesApiGetInvoicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvoices(requestParameters: InvoicesApiGetInvoicesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Invoices> {
            return localVarFp.getInvoices(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Records a payment for the invoice. If no payment is due, the invoice is marked as `PAID`. Otherwise, the invoice is marked as `PARTIALLY PAID`.
         * @summary Record payment for invoice
         * @param {InvoicesApiRecordPaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordPayment(requestParameters: InvoicesApiRecordPaymentRequest, options?: AxiosRequestConfig): AxiosPromise<PaymentReference> {
            return localVarFp.recordPayment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Records a refund for the invoice. If all payments are refunded, the invoice is marked as `REFUNDED`. Otherwise, the invoice is marked as `PARTIALLY REFUNDED`.
         * @summary Record refund for invoice
         * @param {InvoicesApiRecordRefundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordRefund(requestParameters: InvoicesApiRecordRefundRequest, options?: AxiosRequestConfig): AxiosPromise<RefundReference> {
            return localVarFp.recordRefund(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends or schedules an invoice, by ID, to be sent to a customer. The action depends on the invoice issue date:<ul><li>If the invoice issue date is current or in the past, sends the invoice immediately.</li><li>If the invoice issue date is in the future, schedules the invoice to be sent on that date.</li></ul>To suppress the merchant\'s email notification, set the `send_to_invoicer` body parameter to `false`. To send the invoice through a share link and not through PayPal, set the <code>send_to_recipient</code> parameter to <code>false</code> in the <code>notification</code> object. The <code>send_to_recipient</code> parameter does not apply to a future issue date because the invoice is scheduled to be sent through PayPal on that date.<blockquote><strong>Notes:</strong><ul><li>After you send an invoice, resending it has no effect.</li><li>To send a notification for updates, <a href=\"#invoices_update\">update the invoice</a> and set the <code>send_to_recipient</code> body parameter to <code>true</code>.</li></ul></blockquote>
         * @summary Send invoice
         * @param {InvoicesApiSendInvoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendInvoice(requestParameters: InvoicesApiSendInvoiceRequest, options?: AxiosRequestConfig): AxiosPromise<LinkDescription> {
            return localVarFp.sendInvoice(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends a reminder to the payer about an invoice, by ID. In the JSON request body, include a `notification` object that defines the subject of the reminder and other details.
         * @summary Send invoice reminder
         * @param {InvoicesApiSendReminderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendReminder(requestParameters: InvoicesApiSendReminderRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sendReminder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fully updates an invoice, by ID. In the JSON request body, include a complete `invoice` object. This call does not support partial updates.
         * @summary Fully update invoice
         * @param {InvoicesApiUpdateFullInvoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFullInvoice(requestParameters: InvoicesApiUpdateFullInvoiceRequest, options?: AxiosRequestConfig): AxiosPromise<Invoice> {
            return localVarFp.updateFullInvoice(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancelSentInvoice operation in InvoicesApi.
 * @export
 * @interface InvoicesApiCancelSentInvoiceRequest
 */
export type InvoicesApiCancelSentInvoiceRequest = {
    
    /**
    * The ID of the draft invoice to delete.
    * @type {string}
    * @memberof InvoicesApiCancelSentInvoice
    */
    readonly invoiceId: string
    
} & Notification

/**
 * Request parameters for createDraftInvoice operation in InvoicesApi.
 * @export
 * @interface InvoicesApiCreateDraftInvoiceRequest
 */
export type InvoicesApiCreateDraftInvoiceRequest = {
    
} & Invoice

/**
 * Request parameters for deleteDraftOrScheduledInvoice operation in InvoicesApi.
 * @export
 * @interface InvoicesApiDeleteDraftOrScheduledInvoiceRequest
 */
export type InvoicesApiDeleteDraftOrScheduledInvoiceRequest = {
    
    /**
    * The ID of the draft invoice to delete.
    * @type {string}
    * @memberof InvoicesApiDeleteDraftOrScheduledInvoice
    */
    readonly invoiceId: string
    
}

/**
 * Request parameters for deleteExternalPayment operation in InvoicesApi.
 * @export
 * @interface InvoicesApiDeleteExternalPaymentRequest
 */
export type InvoicesApiDeleteExternalPaymentRequest = {
    
    /**
    * The ID of the draft invoice to delete.
    * @type {string}
    * @memberof InvoicesApiDeleteExternalPayment
    */
    readonly invoiceId: string
    
    /**
    * The ID of the external refund transaction to delete.
    * @type {string}
    * @memberof InvoicesApiDeleteExternalPayment
    */
    readonly transactionId: string
    
}

/**
 * Request parameters for deleteExternalRefund operation in InvoicesApi.
 * @export
 * @interface InvoicesApiDeleteExternalRefundRequest
 */
export type InvoicesApiDeleteExternalRefundRequest = {
    
    /**
    * The ID of the draft invoice to delete.
    * @type {string}
    * @memberof InvoicesApiDeleteExternalRefund
    */
    readonly invoiceId: string
    
    /**
    * The ID of the external refund transaction to delete.
    * @type {string}
    * @memberof InvoicesApiDeleteExternalRefund
    */
    readonly transactionId: string
    
}

/**
 * Request parameters for generateQrCode operation in InvoicesApi.
 * @export
 * @interface InvoicesApiGenerateQrCodeRequest
 */
export type InvoicesApiGenerateQrCodeRequest = {
    
    /**
    * The ID of the draft invoice to delete.
    * @type {string}
    * @memberof InvoicesApiGenerateQrCode
    */
    readonly invoiceId: string
    
} & QrConfig

/**
 * Request parameters for getDetails operation in InvoicesApi.
 * @export
 * @interface InvoicesApiGetDetailsRequest
 */
export type InvoicesApiGetDetailsRequest = {
    
    /**
    * The ID of the draft invoice to delete.
    * @type {string}
    * @memberof InvoicesApiGetDetails
    */
    readonly invoiceId: string
    
}

/**
 * Request parameters for getInvoices operation in InvoicesApi.
 * @export
 * @interface InvoicesApiGetInvoicesRequest
 */
export type InvoicesApiGetInvoicesRequest = {
    
    /**
    * The page number to be retrieved, for the list of templates. So, a combination of `page=1` and `page_size=20` returns the first 20 templates. A combination of `page=2` and `page_size=20` returns the next 20 templates.
    * @type {number}
    * @memberof InvoicesApiGetInvoices
    */
    readonly page?: number
    
    /**
    * The maximum number of templates to return in the response.
    * @type {number}
    * @memberof InvoicesApiGetInvoices
    */
    readonly pageSize?: number
    
    /**
    * Indicates whether the to show <code>total_pages</code> and <code>total_items</code> in the response.
    * @type {boolean}
    * @memberof InvoicesApiGetInvoices
    */
    readonly totalRequired?: boolean
    
    /**
    * The fields to return in the response. Value is `all` or `none`. To return only the template name, ID, and default attributes, specify `none`.
    * @type {string}
    * @memberof InvoicesApiGetInvoices
    */
    readonly fields?: string
    
}

/**
 * Request parameters for recordPayment operation in InvoicesApi.
 * @export
 * @interface InvoicesApiRecordPaymentRequest
 */
export type InvoicesApiRecordPaymentRequest = {
    
    /**
    * The ID of the draft invoice to delete.
    * @type {string}
    * @memberof InvoicesApiRecordPayment
    */
    readonly invoiceId: string
    
} & PaymentDetail

/**
 * Request parameters for recordRefund operation in InvoicesApi.
 * @export
 * @interface InvoicesApiRecordRefundRequest
 */
export type InvoicesApiRecordRefundRequest = {
    
    /**
    * The ID of the draft invoice to delete.
    * @type {string}
    * @memberof InvoicesApiRecordRefund
    */
    readonly invoiceId: string
    
} & RefundDetail

/**
 * Request parameters for sendInvoice operation in InvoicesApi.
 * @export
 * @interface InvoicesApiSendInvoiceRequest
 */
export type InvoicesApiSendInvoiceRequest = {
    
    /**
    * The ID of the draft invoice to delete.
    * @type {string}
    * @memberof InvoicesApiSendInvoice
    */
    readonly invoiceId: string
    
} & Notification

/**
 * Request parameters for sendReminder operation in InvoicesApi.
 * @export
 * @interface InvoicesApiSendReminderRequest
 */
export type InvoicesApiSendReminderRequest = {
    
    /**
    * The ID of the draft invoice to delete.
    * @type {string}
    * @memberof InvoicesApiSendReminder
    */
    readonly invoiceId: string
    
} & Notification

/**
 * Request parameters for updateFullInvoice operation in InvoicesApi.
 * @export
 * @interface InvoicesApiUpdateFullInvoiceRequest
 */
export type InvoicesApiUpdateFullInvoiceRequest = {
    
    /**
    * The ID of the draft invoice to delete.
    * @type {string}
    * @memberof InvoicesApiUpdateFullInvoice
    */
    readonly invoiceId: string
    
    /**
    * Indicates whether to send the invoice update notification to the recipient.
    * @type {boolean}
    * @memberof InvoicesApiUpdateFullInvoice
    */
    readonly sendToRecipient?: boolean
    
    /**
    * Indicates whether to send the invoice update notification to the merchant.
    * @type {boolean}
    * @memberof InvoicesApiUpdateFullInvoice
    */
    readonly sendToInvoicer?: boolean
    
} & Invoice

/**
 * InvoicesApiGenerated - object-oriented interface
 * @export
 * @class InvoicesApiGenerated
 * @extends {BaseAPI}
 */
export class InvoicesApiGenerated extends BaseAPI {
    /**
     * Cancels a sent invoice, by ID, and, optionally, sends a notification about the cancellation to the payer, merchant, and CC: emails.
     * @summary Cancel sent invoice
     * @param {InvoicesApiCancelSentInvoiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApiGenerated
     */
    public cancelSentInvoice(requestParameters: InvoicesApiCancelSentInvoiceRequest, options?: AxiosRequestConfig) {
        return InvoicesApiFp(this.configuration).cancelSentInvoice(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a draft invoice. To move the invoice from a draft to payable state, you must <a href=\"#invoices_send\">send the invoice</a>.<br/><br/>In the JSON request body, include invoice details including merchant information. The <code>invoice</code> object must include an <code>items</code> array.<blockquote><strong>Note:</strong> The merchant that you specify in an invoice must have a PayPal account in good standing.</blockquote>.
     * @summary Create draft invoice
     * @param {InvoicesApiCreateDraftInvoiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApiGenerated
     */
    public createDraftInvoice(requestParameters: InvoicesApiCreateDraftInvoiceRequest, options?: AxiosRequestConfig) {
        return InvoicesApiFp(this.configuration).createDraftInvoice(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a draft or scheduled invoice, by ID. Deletes invoices in the draft or scheduled state only. For invoices that have already been sent, you can <a href=\"/docs/api/invoicing/v2/#invoices_cancel\">cancel the invoice</a>. After you delete a draft or scheduled invoice, you can no longer use it or show its details. However, you can reuse its invoice number.
     * @summary Delete invoice
     * @param {InvoicesApiDeleteDraftOrScheduledInvoiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApiGenerated
     */
    public deleteDraftOrScheduledInvoice(requestParameters: InvoicesApiDeleteDraftOrScheduledInvoiceRequest, options?: AxiosRequestConfig) {
        return InvoicesApiFp(this.configuration).deleteDraftOrScheduledInvoice(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes an external payment, by invoice ID and transaction ID.
     * @summary Delete external payment
     * @param {InvoicesApiDeleteExternalPaymentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApiGenerated
     */
    public deleteExternalPayment(requestParameters: InvoicesApiDeleteExternalPaymentRequest, options?: AxiosRequestConfig) {
        return InvoicesApiFp(this.configuration).deleteExternalPayment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes an external refund, by invoice ID and transaction ID.
     * @summary Delete external refund
     * @param {InvoicesApiDeleteExternalRefundRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApiGenerated
     */
    public deleteExternalRefund(requestParameters: InvoicesApiDeleteExternalRefundRequest, options?: AxiosRequestConfig) {
        return InvoicesApiFp(this.configuration).deleteExternalRefund(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generates the next invoice number that is available to the merchant. The next invoice number uses the prefix and suffix from the last invoice number and increments the number by one. For example, the next invoice number after `INVOICE-1234` is `INVOICE-1235`.
     * @summary Generate invoice number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApiGenerated
     */
    public generateNextInvoiceNumber(options?: AxiosRequestConfig) {
        return InvoicesApiFp(this.configuration).generateNextInvoiceNumber(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generates a QR code for an invoice, by ID. The QR code is a PNG image in <a href=\"https://www.base64encode.org/\">Base64-encoded</a> format that corresponds to the invoice ID. You can generate a QR code for an invoice and add it to a paper or PDF invoice. When customers use their mobile devices to scan the QR code, they are redirected to the PayPal mobile payment flow where they can view the invoice and pay online with PayPal or a credit card. Before you get a QR code, you must <a href=\"#invoices_create\">create an invoice</a> and <a href=\"#invoices_send\">send an invoice</a> to move the invoice from a draft to payable state. Do not include an email address if you do not want the invoice emailed.
     * @summary Generate QR code
     * @param {InvoicesApiGenerateQrCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApiGenerated
     */
    public generateQrCode(requestParameters: InvoicesApiGenerateQrCodeRequest, options?: AxiosRequestConfig) {
        return InvoicesApiFp(this.configuration).generateQrCode(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Shows details for an invoice, by ID.
     * @summary Show invoice details
     * @param {InvoicesApiGetDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApiGenerated
     */
    public getDetails(requestParameters: InvoicesApiGetDetailsRequest, options?: AxiosRequestConfig) {
        return InvoicesApiFp(this.configuration).getDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists invoices. To filter the invoices that appear in the response, you can specify one or more optional query parameters.
     * @summary List invoices
     * @param {InvoicesApiGetInvoicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApiGenerated
     */
    public getInvoices(requestParameters: InvoicesApiGetInvoicesRequest = {}, options?: AxiosRequestConfig) {
        return InvoicesApiFp(this.configuration).getInvoices(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Records a payment for the invoice. If no payment is due, the invoice is marked as `PAID`. Otherwise, the invoice is marked as `PARTIALLY PAID`.
     * @summary Record payment for invoice
     * @param {InvoicesApiRecordPaymentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApiGenerated
     */
    public recordPayment(requestParameters: InvoicesApiRecordPaymentRequest, options?: AxiosRequestConfig) {
        return InvoicesApiFp(this.configuration).recordPayment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Records a refund for the invoice. If all payments are refunded, the invoice is marked as `REFUNDED`. Otherwise, the invoice is marked as `PARTIALLY REFUNDED`.
     * @summary Record refund for invoice
     * @param {InvoicesApiRecordRefundRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApiGenerated
     */
    public recordRefund(requestParameters: InvoicesApiRecordRefundRequest, options?: AxiosRequestConfig) {
        return InvoicesApiFp(this.configuration).recordRefund(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends or schedules an invoice, by ID, to be sent to a customer. The action depends on the invoice issue date:<ul><li>If the invoice issue date is current or in the past, sends the invoice immediately.</li><li>If the invoice issue date is in the future, schedules the invoice to be sent on that date.</li></ul>To suppress the merchant\'s email notification, set the `send_to_invoicer` body parameter to `false`. To send the invoice through a share link and not through PayPal, set the <code>send_to_recipient</code> parameter to <code>false</code> in the <code>notification</code> object. The <code>send_to_recipient</code> parameter does not apply to a future issue date because the invoice is scheduled to be sent through PayPal on that date.<blockquote><strong>Notes:</strong><ul><li>After you send an invoice, resending it has no effect.</li><li>To send a notification for updates, <a href=\"#invoices_update\">update the invoice</a> and set the <code>send_to_recipient</code> body parameter to <code>true</code>.</li></ul></blockquote>
     * @summary Send invoice
     * @param {InvoicesApiSendInvoiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApiGenerated
     */
    public sendInvoice(requestParameters: InvoicesApiSendInvoiceRequest, options?: AxiosRequestConfig) {
        return InvoicesApiFp(this.configuration).sendInvoice(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends a reminder to the payer about an invoice, by ID. In the JSON request body, include a `notification` object that defines the subject of the reminder and other details.
     * @summary Send invoice reminder
     * @param {InvoicesApiSendReminderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApiGenerated
     */
    public sendReminder(requestParameters: InvoicesApiSendReminderRequest, options?: AxiosRequestConfig) {
        return InvoicesApiFp(this.configuration).sendReminder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fully updates an invoice, by ID. In the JSON request body, include a complete `invoice` object. This call does not support partial updates.
     * @summary Fully update invoice
     * @param {InvoicesApiUpdateFullInvoiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApiGenerated
     */
    public updateFullInvoice(requestParameters: InvoicesApiUpdateFullInvoiceRequest, options?: AxiosRequestConfig) {
        return InvoicesApiFp(this.configuration).updateFullInvoice(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
